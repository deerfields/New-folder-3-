version: '3.8'

services:
  # =============================================================================
  # MAIN APPLICATION SERVICES
  # =============================================================================
  
  # API Gateway & Main Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    env_file:
      - env.example
    depends_on:
      - postgres
      - redis
      - mongodb
      - elasticsearch
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
    networks:
      - mallos-network
    restart: unless-stopped

  # WebSocket Service
  websocket:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run dev:websocket
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - WEBSOCKET_PORT=3002
    env_file:
      - env.example
    depends_on:
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - mallos-network
    restart: unless-stopped

  # Background Workers
  workers:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run dev:worker
    environment:
      - NODE_ENV=development
    env_file:
      - env.example
    depends_on:
      - redis
      - rabbitmq
      - kafka
    volumes:
      - ./src:/app/src
    networks:
      - mallos-network
    restart: unless-stopped

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # PostgreSQL (Primary Database)
  postgres:
    image: postgres:15-alpine
    container_name: mallos-postgres
    environment:
      POSTGRES_DB: mallos_enterprise
      POSTGRES_USER: mallos_user
      POSTGRES_PASSWORD: mallos_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - mallos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mallos_user -d mallos_enterprise"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (Document Storage)
  mongodb:
    image: mongo:6.0
    container_name: mallos-mongodb
    environment:
      MONGO_INITDB_DATABASE: mallos_enterprise
      MONGO_INITDB_ROOT_USERNAME: mallos_admin
      MONGO_INITDB_ROOT_PASSWORD: mallos_password
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - mallos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Caching & Sessions)
  redis:
    image: redis:7-alpine
    container_name: mallos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mallos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (Search & Analytics)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: mallos-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mallos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MESSAGE QUEUE & STREAMING
  # =============================================================================
  
  # RabbitMQ (Message Queue)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: mallos-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - mallos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka (Real-time Streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: mallos-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mallos-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: mallos-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - mallos-network
    restart: unless-stopped

  # =============================================================================
  # AI & ML SERVICES
  # =============================================================================
  
  # TensorFlow Serving
  tensorflow-serving:
    image: tensorflow/serving:2.13.0
    container_name: mallos-tensorflow-serving
    ports:
      - "8501:8501"
      - "8502:8502"
    volumes:
      - ./ai-models:/models
    environment:
      - MODEL_NAME=mallos_models
    command: ["tensorflow_model_server", "--port=8501", "--rest_api_port=8502", "--model_name=mallos_models", "--model_base_path=/models"]
    networks:
      - mallos-network
    restart: unless-stopped

  # Python AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: mallos-ai-services
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./ai-services:/app
      - ./ai-models:/app/models
    networks:
      - mallos-network
    restart: unless-stopped
    depends_on:
      - tensorflow-serving
      - redis

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  
  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mallos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mallos-network
    restart: unless-stopped

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:9.5.0
    container_name: mallos-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mallos-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  
  # pgAdmin (PostgreSQL Management)
  pgadmin:
    image: dpage/pgadmin4:7.4
    container_name: mallos-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mallos.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - mallos-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mallos-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - mallos-network
    restart: unless-stopped
    depends_on:
      - redis

  # =============================================================================
  # SECURITY & COMPLIANCE
  # =============================================================================
  
  # Vault (Secrets Management)
  vault:
    image: vault:1.13.0
    container_name: mallos-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: mallos-vault-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/logs
    networks:
      - mallos-network
    restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================
  
  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mallos-frontend
    ports:
      - "3003:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_WS_URL=ws://localhost:3002
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - mallos-network
    restart: unless-stopped
    depends_on:
      - api

  # React Native Development Server
  mobile-dev-server:
    build:
      context: ./mobile
      dockerfile: Dockerfile.dev
    container_name: mallos-mobile-dev
    ports:
      - "8082:8081"
    volumes:
      - ./mobile:/app
      - /app/node_modules
    networks:
      - mallos-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  vault_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  mallos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 